
package itst.dk;

import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Paths;

import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;

//import play.Play;


/**
 * This is the main service of CPR Broker. It allows access to CPR data through a standard PART interface.  Methods of this service are executed via local data provider whenever possible (except RefreshRead). Otherwise, an external data provider is used to implement the request.
 * 
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.4-b01
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "Part", targetNamespace = "http://dk.itst", wsdlLocation = "wsdl\\wsdl.xml")
public class Part
    extends Service
{

    private final static URL PART_WSDL_LOCATION;
    private final static WebServiceException PART_EXCEPTION;
    private final static QName PART_QNAME = new QName("http://dk.itst", "Part");

    static {
    	URL path = null; 
    	
    	try {
    		//TODO Make this configurable!
			path = Paths.get("conf/wsdl.xml").toUri().toURL();
		} catch (MalformedURLException e1) {
			e1.printStackTrace();
		}
    	
        PART_WSDL_LOCATION = path; //itst.dk.Part.class.getResource("/home/srnkrkgrd/play.cprlookup-j/conf/wsdl.xml");
        WebServiceException e = null;
        if (PART_WSDL_LOCATION == null) {
            e = new WebServiceException("Cannot find '" + PART_WSDL_LOCATION + "' wsdl. Place the resource correctly in the classpath.");
        }
        PART_EXCEPTION = e;
    }

    public Part() {
        super(__getWsdlLocation(), PART_QNAME);
    }

    public Part(WebServiceFeature... features) {
        super(__getWsdlLocation(), PART_QNAME, features);
    }

    public Part(URL wsdlLocation) {
        super(wsdlLocation, PART_QNAME);
    }

    public Part(URL wsdlLocation, WebServiceFeature... features) {
        super(wsdlLocation, PART_QNAME, features);
    }

    public Part(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public Part(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns PartSoap12
     */
    @WebEndpoint(name = "PartSoap12")
    public PartSoap12 getPartSoap12() {
        return super.getPort(new QName("http://dk.itst", "PartSoap12"), PartSoap12.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns PartSoap12
     */
    @WebEndpoint(name = "PartSoap12")
    public PartSoap12 getPartSoap12(WebServiceFeature... features) {
        return super.getPort(new QName("http://dk.itst", "PartSoap12"), PartSoap12.class, features);
    }

    private static URL __getWsdlLocation() {
        if (PART_EXCEPTION!= null) {
            throw PART_EXCEPTION;
        }
        return PART_WSDL_LOCATION;
    }

}
